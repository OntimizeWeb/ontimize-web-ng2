
$mat-ckeditor-floating-placeholder-scale-factor: 0.75 !default;

// Gradient for showing the dashed line when the input is disabled.
$mat-ckeditor-underline-disabled-background-image: linear-gradient(to right,
        rgba(0, 0, 0, 0.26) 0%, rgba(0, 0, 0, 0.26) 33%, transparent 0%);

/**
 * Undo the red box-shadow glow added by Firefox on invalid inputs.
 * See https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-ui-invalid
 */
:-moz-ui-invalid {
  box-shadow: none;
}

/**
 * Applies a floating placeholder above the input itself.
 */
@mixin mat-ckeditor-placeholder-floating {
  display: block;
  padding-bottom: 5px;
  transform: translateY(-100%) scale($mat-ckeditor-floating-placeholder-scale-factor);
  width: 100% / $mat-ckeditor-floating-placeholder-scale-factor;
}

.ckeditor{
  height: auto;
}

ckeditor {
  display: inline-block;
  position: relative;

  // To avoid problems with text-align.
  text-align: left;
  [dir='rtl'] & {
    text-align: right;
  }
}

// Global wrapper. We need to apply margin to the element for spacing, but
// cannot apply it to the host element directly.
.mat-ckeditor-wrapper {
  margin: 16px 0;
}

// We use a table layout to baseline align the prefix and suffix classes.
// The underline is outside of it so it can cover all of the elements under
// this table.
// Flex does not respect the baseline. What we really want is akin to a table
// as want an inline-block where elements don't wrap.
.mat-ckeditor-table {
  display: inline-table;
  flex-flow: column;
  vertical-align: bottom;
  width: 100%;

  & > * {
    display: table-cell;
  }
}

.mat-ckeditor-infix {
  position: relative;
}

// The placeholder label. This is invisible unless it is. The logic to show it is
// basically `empty || (float && (!empty || focused))`. Float is dependent on the
// `floatingPlaceholder` input.
.mat-ckeditor-placeholder {
  // The placeholder is after the <input>, but needs to be aligned top-left of the
  // infix <div>.
  position: absolute;
  left: 0;
  top: 0;

  font-size: 100%;
  pointer-events: none;  // We shouldn't catch mouse events (let them through).
  z-index: 1;

  // Put ellipsis text overflow.
  width: 100%;
  display: none;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow-x: hidden;


  &.mat-empty {
    display: block;
    cursor: text;
    top: 65px;
  }

  // Show the placeholder above the input when it's not empty, or focused.
  &.mat-float:not(.mat-empty), &.mat-float.mat-focused {
    @include mat-ckeditor-placeholder-floating;
    top: 0px;
  }

  [dir='rtl'] & {
    transform-origin: bottom right;
  }

}

// Pseudo-class for Chrome and Safari auto-fill to move the placeholder to
// the floating position. This is necessary because these browsers do not actually
// fire any events when a form auto-fill is occurring.
// Once the autofill is committed, a change event happen and the regular mat-ckeditor
// classes take over to fulfill this behaviour.
input:-webkit-autofill + .mat-ckeditor-placeholder {
  @include mat-ckeditor-placeholder-floating;
}

// The underline is what's shown under the input, its prefix and its suffix.
// The ripple is the blue animation coming on top of it.
.mat-ckeditor-underline {
  position: absolute;
  height: 1px;
  width: 100%;
  margin-top: 4px;
  border-top-width: 1px;
  border-top-style: solid;

  &.mat-disabled {
    border-top: 0;
    background-image: $mat-ckeditor-underline-disabled-background-image;
    background-position: 0;
    background-size: 4px 1px;
    background-repeat: repeat-x;
  }

  .mat-ckeditor-ripple {
    position: absolute;
    height: 2px;
    z-index: 1;
    top: -1px;
    width: 100%;
    opacity: 0;

    &.mat-focused {
      opacity: 1;
      transform: scaleY(1);
    }
  }
}

.mat-ckeditor {
  height: auto;
  .mat-ckeditor-wrapper {
    .mat-hint {
      bottom: -0.5em;
    }
  }
  .cke{
    border-bottom: none !important;
  }
  .cke_top{
    padding: 0px !important;
  }
}